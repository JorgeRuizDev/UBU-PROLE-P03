options {
    STATIC=false;
	DEBUG_PARSER=false;
}

PARSER_BEGIN(Compiler)

/**
 * Main Class
 *
 * @author <a href="mailto:jrg1011@alu.ubu.es">Jorge Ruiz GÃ³mez</a>
 */

public class Compiler {
    /**
     * Main method.
     *
     * @param args filename to parse or none. 
     */
    public static void main(String [] args) {
        try {
			final Compiler compiler;

			if (args.length < 1)
            	compiler = new Compiler(System.in);
			else
				compiler = new Compiler(new java.io.FileInputStream(args[0]));

			compiler.Run();
        } catch (java.io.FileNotFoundException ex) {
            out("File not found or invalid (" + args[0] + ")");
        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println("Something went terribly wrong!");
        }
    }

    /*
    * Current Label Value
    */
    public static int label_count = 0;

    /**
    *   Method that returns the next available label.
    */
    public static int get_next_label(){
        return label_count++;
    }

    /**
    * Method that displays/outs the compiler output.
    *
    */
    public static void out(CharSequence s){
        System.out.println(s);
        //file.write(s);
    }

}

PARSER_END(Compiler)

/**
* Token Definition
*/
TOKEN : {
    <#DIG: ["0"-"9"]>
|   <#CHAR: ["a"-"z", "A"-"Z"]>
|   <NUM: (<DIG>)+>
|   <IF: "IF">
|   <ELSE: "ELSE">
|   <ENDIF: "END-IF">
|   <WHEN: "WHEN">
|   <COMPUTE: "COMPUTE">
|   <MOVE: "MOVE">
|   <EVALUATE: "EVALUATE">
|   <ENDEVAL: "END-EVALUATE">
|   <PERFORM: "PERFORM">
|   <ENDPERF: "END-PERFORM">
|   <UNTIL: "UNTIL">
|   <DISPLAY: "DISPLAY">
|   <TO: "TO">
|   <EQUALS: "=">
|   <ADD: "+">
|   <SUB: "-">
|   <MULT: "*">
|   <DIV: "/">
|   <ID: <CHAR>(<DIG> | <CHAR>)*>
}

/**
* Skip Tokens
*/
<*> SKIP: {
    <SPACES: ["\n", "\r", "\t", " "]>
|   <COMMENT: "**" (~["\n", "\r"])*>
}

/**
* Axiom
*/
void Run(): {} {
    Sentences()
    <EOF>   // Optional
}

/**
* Sentences Terminal
*/
void Sentences(): {}{
    (Sent())+
}

/**
* Sentences'
*/
void Sent():{}{
     Assig()
   | Proc()
}

/**
* Assign Operators
*/
void Assig():{

        /**
        * Left stack operator (ID)
        */
        Token left = null;

        /**
        * Right Stack operator. (ID)
        */
        Token right = null;

        /**
         * Value. (NUM)
         */
        Token val = null;

    }{
        /*
            COMPUTE
         */
        <COMPUTE>
        left=<ID>
        {    out("\tvalori " + left);}
        <EQUALS>
        Arithexp()
        {    out("\tasigna");}

        /*
             MOVE
        */
    |   <MOVE>
        (val=<NUM> | right=<ID> )
        <TO> left=<ID>
        {
            out("\tvalori " + left);
            if (right != null) // Two vars  -> a = b
                out("\tvalord " + right);
            else               // Num to var -> a = 5
                out("\tmete "+ val);

            out("\tasigna");
        }
}
/**
* Statments
*/
void Proc():{
        // Perfom Labels
        int perform_label = -1;
        int perform_end_label = -1;

        // If/else label
        int else_label = -1;
        int endif_label = -1;

        // EVALUATE
        Token evaluate_id = null;
        int end_evaluate_label = -1;
    }{

        /*
            IF / ELSE / ENDIF
         */
         <IF> Arithexp() {else_label = get_next_label(); endif_label = get_next_label();}
            // if false, jump to else.
         {    out("\tsifalsovea LBL" + else_label);}
         Sentences()
            // End of statement - Jump to endif
         {    out("\tvea LBL" + endif_label);}
         // ELSE:
         {    out("LBL"+ else_label);}
         Elseopt()
         {
            out("LBL" + endif_label);
         }

    /*
        EVALUATE:
     */
    |   <EVALUATE>
        evaluate_id=<ID>
            {end_evaluate_label = get_next_label();}

        (WhenClause(evaluate_id.image, end_evaluate_label))+

        <ENDEVAL>
        //End of the Eval:
        {    out("LBL" + end_evaluate_label);}

    /*
        PERFORM:
     */
    |   <PERFORM>
        {
            perform_label = get_next_label();
            perform_end_label = get_next_label();
            out("LBL" + perform_label);
        }

        <UNTIL>
        Arithexp()
        {    out("\tsiciertovea LBL" + perform_end_label);}
        Sentences()
        <ENDPERF>
        {
            out("\tvea LBL" + perform_label);
            out("LBL" + perform_end_label);
        }

    |   <DISPLAY> Arithexp()
        {    out("\tprint");}

}

/**
* Else and End if
*/
void Elseopt():{}{
        <ELSE> Sentences() <ENDIF>
    |   <ENDIF>
}

/**
* When Clause (Evaluate sub-statement)
* @Param id (String): The current ID that is being evaluated.
* @Param end_label: The last statement.
*/
void WhenClause(String id, int end_label): {
    int next_when_label = -1;
 }{

    {    out("\tvalord " + id);} // EVALUATE X
    <WHEN> Arithexp()

    { // Check if it's true.
        next_when_label = get_next_label();
        out("\tsub");
        out("\tsifalsovea LBL" + next_when_label);
    }
     Sentences()
    {
    // Skip the rest when statements, jump to end-evaluate
        out("\tvea LBL" + end_label); // if true, jump to the end of the EVALUATE statement.
        out("LBL" + next_when_label);
    }
}

/**
* Arithmetic Expresion
*/
void Arithexp(): {}{
    Multexp() ArithexpP()
}

/**
* Recursive Arithmetic Expresion
*/
void ArithexpP():{}{
    (
        <ADD> Multexp() ArithexpP() {out("\tsum");}
    |   <SUB> Multexp() ArithexpP() {out("\tsub");}
    )?
}

/**
* Arithmetic Expresion (Values and * or /)
*/
void Multexp():{}{
    Value() MultexpP()
}

/**
* Multiplication Expresion (Recursive)
*/
void MultexpP(): {}{
    (
        <MULT> Value() MultexpP() {out("\tmul");}
    |   <DIV>  Value() MultexpP() {out("\tdiv");}
    )?
}

/**
* A Value
* Recognizes:
* - An INT
* - A String that starts with a letter
* - An arithmetic expresion.
*/
void Value():{
    Token val;
    }{
      val=<NUM> {out("\tmete " + val);}
    | val=<ID>  {out("\tvalord " + val);}
    | "(" Arithexp() ")"

}
